import sys, pathlib
d_root = pathlib.Path(__file__).parent.absolute().parent.parent
sys.path.append(str(d_root))

# from utility import printIn
def printIn(asm):
    print("  " + asm)

def gen_2x2_full(n, basemul_base, v_spacing_16, v_spacing_32, r_spacing_16, r_spacing_32, s_spacing_16, s_spacing_32):
    print("void __gf_polymul_%dx%d_2x2_x_2x2(int * M, int * M1_16, int * M1_32, int * M2_16, int * M2_32){" % (n//2, n//2))
    printIn("int tmp_16_1[%d];" % (n//2))
    printIn("int tmp_32_0[%d], tmp_32_1[%d];" % (n, n))
    printIn("int i, T, *X, *Y;")
    print("")
    printIn("/* u */")
    printIn("basemul%d_16bit_%dx%d(M, M2_16, M1_16); // uux" % (n, basemul_base, basemul_base))
    printIn("basemul%d_16bit_%dx%d(tmp_16_1, M2_16+%d, M1_16+%d); // vr" % (n, basemul_base, basemul_base, v_spacing_16, r_spacing_16))
    printIn("basemul%d_32bit_%dx%d(tmp_32_0, M2_32, M1_32); // uux" % (n, basemul_base, basemul_base))
    printIn("basemul%d_32bit_%dx%d(tmp_32_1, M2_32+%d, M1_32+%d); // vr" % (n, basemul_base, basemul_base, v_spacing_32, r_spacing_32))
    printIn("for (X=M, Y=tmp_16_1, i=%d; i>0; i--) {" % (n//2))
    printIn("  T = __SADD16(*(Y++),*X);")
    printIn("  *(X++) = T;")
    printIn("}")
    printIn("intt%d_16bit(M);" % (n))
    printIn("for (X=tmp_32_0, Y=tmp_32_1, i=%d; i>0; i--) {" % (n))
    printIn("  T = *(Y++) + *X;")
    printIn("  *(X++) = T;")
    printIn("}")
    printIn("intt%d_32bit(tmp_32_0);" % (n))
    printIn("crt%d(M, tmp_32_0);" % (n))
    print("")
    printIn("/* v */")
    printIn("basemul%d_16bit_%dx%d(M+%d, M2_16, M1_16+%d); // uvx" % (n, basemul_base, basemul_base, v_spacing_16, v_spacing_16))
    printIn("basemul%d_16bit_%dx%d(tmp_16_1, M2_16+%d, M1_16+%d); // vs" % (n, basemul_base, basemul_base, v_spacing_16, s_spacing_16))
    printIn("basemul%d_32bit_%dx%d(tmp_32_0, M2_32, M1_32+%d); // uvx" % (n, basemul_base, basemul_base, v_spacing_32))
    printIn("basemul%d_32bit_%dx%d(tmp_32_1, M2_32+%d, M1_32+%d); // vs" % (n, basemul_base, basemul_base, v_spacing_32, s_spacing_32))
    printIn("for (X=M+%d, Y=tmp_16_1, i=%d; i>0; i--) {  " % (v_spacing_16, n//2))
    printIn("  T = __SADD16(*(Y++),*X);")
    printIn("  *(X++) = T;")
    printIn("}")
    printIn("intt%d_16bit(M+%d);" % (n, v_spacing_16))
    printIn("for (X=tmp_32_0, Y=tmp_32_1, i=%d; i>0; i--) {" % (n))
    printIn("  T = *(Y++) + *X;")
    printIn("  *(X++) = T;")
    printIn("}")
    printIn("intt%d_32bit(tmp_32_0);" % (n))
    printIn("crt%d(M+%d, tmp_32_0);" % (n, v_spacing_16))
    print("")
    printIn("/* r */")
    printIn("basemul%d_16bit_%dx%d(M+%d, M2_16+%d, M1_16); // r2 u1 x" % (n, basemul_base, basemul_base, r_spacing_16, r_spacing_16))
    printIn("basemul%d_16bit_%dx%d(tmp_16_1, M2_16+%d, M1_16+%d); // s2 r1" % (n, basemul_base, basemul_base, s_spacing_16, r_spacing_16))
    printIn("basemul%d_32bit_%dx%d(tmp_32_0, M2_32+%d, M1_32); // r2 u1 x" % (n, basemul_base, basemul_base, r_spacing_32))
    printIn("basemul%d_32bit_%dx%d(tmp_32_1, M2_32+%d, M1_32+%d); // s2 r1" % (n, basemul_base, basemul_base, s_spacing_32, r_spacing_32))
    printIn("for (X=M+%d, Y=tmp_16_1, i=%d; i>0; i--) {" % (r_spacing_16, n//2))
    printIn("  T = __SADD16(*(Y++),*X);")
    printIn("  *(X++) = T;")
    printIn("}")
    printIn("intt%d_16bit(M+%d);" % (n, r_spacing_16))
    printIn("for (X=tmp_32_0, Y=tmp_32_1, i=%d; i>0; i--) {" % (n))
    printIn("  T = *(Y++) + *X;")
    printIn("  *(X++) = T;")
    printIn("}")
    printIn("intt%d_32bit(tmp_32_0);" % (n))
    printIn("crt%d(M+%d, tmp_32_0);" % (n, r_spacing_16))

    print("")
    printIn("/* s */")
    printIn("basemul%d_16bit_%dx%d(M+%d, M2_16+%d, M1_16+%d); // rvx" % (n, basemul_base, basemul_base, s_spacing_16, r_spacing_16, v_spacing_16))
    printIn("basemul%d_16bit_%dx%d(tmp_16_1, M2_16+%d, M1_16+%d); // ss" % (n, basemul_base, basemul_base, s_spacing_16, s_spacing_16))
    printIn("basemul%d_32bit_%dx%d(tmp_32_0, M2_32+%d, M1_32+%d); // rvx" % (n, basemul_base, basemul_base, r_spacing_32, v_spacing_32))
    printIn("basemul%d_32bit_%dx%d(tmp_32_1, M2_32+%d, M1_32+%d); // ss" % (n, basemul_base, basemul_base, s_spacing_32, s_spacing_32))
    printIn("for (X=M+%d, Y=tmp_16_1, i=%d; i>0; i--) {" % (s_spacing_16, n//2))
    printIn("  T = __SADD16(*(Y++),*X);")
    printIn("  *(X++) = T;")
    printIn("}")
    printIn("intt%d_16bit(M+%d);" % (n, s_spacing_16))
    printIn("for (X=tmp_32_0, Y=tmp_32_1, i=%d; i>0; i--) {" % (n))
    printIn("  T = *(Y++) + *X;")
    printIn("  *(X++) = T;")
    printIn("}")
    printIn("intt%d_32bit(tmp_32_0);" % (n))
    printIn("crt%d(M+%d, tmp_32_0);" % (n, s_spacing_16))
    print("}")
    print("")