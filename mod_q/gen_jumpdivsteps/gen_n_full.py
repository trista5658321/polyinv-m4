import sys, pathlib
d_root = pathlib.Path(__file__).parent.absolute().parent.parent
sys.path.append(str(d_root))

# from utility import printIn
def printIn(asm):
    print("  " + asm)

n = 512
q = 7177
qR2inv = round(2**32 / q)

spacing_16 = n//2
v_spacing_16 = spacing_16*1
r_spacing_16 = spacing_16*2
s_spacing_16 = spacing_16*3

spacing_32 = n
v_spacing_32 = spacing_32*1
r_spacing_32 = spacing_32*2
s_spacing_32 = spacing_32*3

print("#include <stdint.h>")
print("#include \"cmsis.h\"")
print("#include <stdio.h>")
print("")
print("extern int jump%ddivsteps(int minusdelta, int *M, int *f, int *g);" % (n//2))
print("void __gf_polymul_%dx%d_2x2_x2p2 (int *V, int *M_16, int *M_32, int *fh, int *gh, int *M);" % (n//2, n//2))
print("void __gf_polymul_%dx%d_2x2_x_2x2 (int * M, int * M1_16, int * M1_32, int * M2_16, int * M2_32);" % (n//2, n//2))
print("int jump%ddivsteps(int minusdelta, int *M, int *f, int *g);" % (n))
print("")
print("#define q %d" % (q))
print("#define qR2inv %d // round(2^32/q)" % (qR2inv))
print("#define _2P15 (1 << 15)")
print("")
print("#if 1")
print("// result range: +- %d (note: 3 loads for _2P15 and the longer qR2inv)" % (q//2))
print("static inline int barrett_16x2i(int X) {")
print("  int32_t QL = __SMLAWB(qR2inv,X,_2P15);")
print("  int32_t QH = __SMLAWT(qR2inv,X,_2P15);")
print("  int32_t SL = __SMULBT(q,QL);")
print("  int32_t SH = __SMULBT(q,QH);")
print("  return(__SSUB16(X,__PKHBT(SL,SH,16)));")
print("}")
print("")
print("#else ")
print("#define barrett_16x2i(A) (A)")
print("#endif")
print("")
print("void __gf_polymul_%dx%d_2x2_x_2x2(int * M, int * M1_16, int * M1_32, int * M2_16, int * M2_32){" % (n//2, n//2))
printIn("int tmp_16_1[%d];" % (n//2))
printIn("int tmp_32_0[%d], tmp_32_1[%d];" % (n, n))
printIn("int i, T, *X, *Y;")
print("")
printIn("/* u */")
printIn("basemul_16bit_4x4(M, M2_16, M1_16); // uux")
printIn("basemul_16bit_4x4(tmp_16_1, M2_16+%d, M1_16+%d); // vr" % (v_spacing_16, r_spacing_16))
printIn("basemul_32bit_4x4(tmp_32_0, M2_32, M1_32); // uux")
printIn("basemul_32bit_4x4(tmp_32_1, M2_32+%d, M1_32+%d); // vr" % (v_spacing_32, r_spacing_32))
printIn("for (X=M, Y=tmp_16_1, i=%d; i>0; i--) {" % (n//2))
printIn("  T = __SADD16(*(Y++),*X);")
printIn("  *(X++) = T;")
printIn("}")
printIn("intt%d_16bit(M);" % (n))
printIn("for (X=tmp_32_0, Y=tmp_32_1, i=%d; i>0; i--) {" % (n))
printIn("  T = *(Y++) + *X;")
printIn("  *(X++) = T;")
printIn("}")
printIn("intt%d_32bit(tmp_32_0);" % (n))
printIn("crt%d(M, tmp_32_0);" % (n))
print("")
printIn("/* v */")
printIn("basemul_16bit_4x4(M+%d, M2_16, M1_16+%d); // uvx" % (v_spacing_16, v_spacing_16))
printIn("basemul_16bit_4x4(tmp_16_1, M2_16+%d, M1_16+%d); // vs" % (v_spacing_16, s_spacing_16))
printIn("basemul_32bit_4x4(tmp_32_0, M2_32, M1_32+%d); // uvx" % (v_spacing_32))
printIn("basemul_32bit_4x4(tmp_32_1, M2_32+%d, M1_32+%d); // vs" % (v_spacing_32, s_spacing_32))
printIn("for (X=M+%d, Y=tmp_16_1, i=%d; i>0; i--) {  " % (v_spacing_16, n//2))
printIn("  T = __SADD16(*(Y++),*X);")
printIn("  *(X++) = T;")
printIn("}")
printIn("intt%d_16bit(M+%d);" % (n, v_spacing_16))
printIn("for (X=tmp_32_0, Y=tmp_32_1, i=%d; i>0; i--) {" % (n))
printIn("  T = *(Y++) + *X;")
printIn("  *(X++) = T;")
printIn("}")
printIn("intt%d_32bit(tmp_32_0);" % (n))
printIn("crt%d(M+%d, tmp_32_0);" % (n, v_spacing_16))
print("")
printIn("/* r */")
printIn("basemul_16bit_4x4(M+%d, M2_16+%d, M1_16); // r2 u1 x" % (r_spacing_16, r_spacing_16))
printIn("basemul_16bit_4x4(tmp_16_1, M2_16+%d, M1_16+%d); // s2 r1" % (s_spacing_16, r_spacing_16))
printIn("basemul_32bit_4x4(tmp_32_0, M2_32+%d, M1_32); // r2 u1 x" % (r_spacing_32))
printIn("basemul_32bit_4x4(tmp_32_1, M2_32+%d, M1_32+%d); // s2 r1" % (s_spacing_32, r_spacing_32))
printIn("for (X=M+%d, Y=tmp_16_1, i=%d; i>0; i--) {" % (r_spacing_16, n//2))
printIn("  T = __SADD16(*(Y++),*X);")
printIn("  *(X++) = T;")
printIn("}")
printIn("intt%d_16bit(M+%d);" % (n, r_spacing_16))
printIn("for (X=tmp_32_0, Y=tmp_32_1, i=%d; i>0; i--) {" % (n))
printIn("  T = *(Y++) + *X;")
printIn("  *(X++) = T;")
printIn("}")
printIn("intt%d_32bit(tmp_32_0);" % (n))
printIn("crt%d(M+%d, tmp_32_0);" % (n, r_spacing_16))

print("")
printIn("/* s */")
printIn("basemul_16bit_4x4(M+%d, M2_16+%d, M1_16+%d); // rvx" % (s_spacing_16, r_spacing_16, v_spacing_16))
printIn("basemul_16bit_4x4(tmp_16_1, M2_16+%d, M1_16+%d); // ss" % (s_spacing_16, s_spacing_16))
printIn("basemul_32bit_4x4(tmp_32_0, M2_32+%d, M1_32+%d); // rvx" % (r_spacing_32, v_spacing_32))
printIn("basemul_32bit_4x4(tmp_32_1, M2_32+%d, M1_32+%d); // ss" % (s_spacing_32, s_spacing_32))
printIn("for (X=M+%d, Y=tmp_16_1, i=%d; i>0; i--) {" % (s_spacing_16, n//2))
printIn("  T = __SADD16(*(Y++),*X);")
printIn("  *(X++) = T;")
printIn("}")
printIn("intt%d_16bit(M+%d);" % (n, s_spacing_16))
printIn("for (X=tmp_32_0, Y=tmp_32_1, i=%d; i>0; i--) {" % (n))
printIn("  T = *(Y++) + *X;")
printIn("  *(X++) = T;")
printIn("}")
printIn("intt%d_32bit(tmp_32_0);" % (n))
printIn("crt%d(M+%d, tmp_32_0);" % (n, s_spacing_16))
print("}")
print("")

# x2p2

print("void __gf_polymul_256x256_2x2_x2p2(int *V, int *M_16, int *M_32, int *fh, int *gh, int *M){")
printIn("int fh_16[%d], gh_16[%d];" % (n//2, n//2))
printIn("int fh_32[%d], gh_32[%d];" % (n, n))
printIn("int tmp_16_1[%d];" % (n//2))
printIn("int tmp_32_0[%d], tmp_32_1[%d];" % (n, n))
print("")
printIn("basemul_x_%d_16bit_4x4(M_16); // u x" % (n))
printIn("basemul_x_%d_16bit_4x4(M_16+%d); // v x" % (n, v_spacing_16))
printIn("basemul_x_%d_32bit_4x4(M_32); // u x" % (n))
printIn("basemul_x_%d_32bit_4x4(M_32+%d); // v x" % (n, v_spacing_32))
print("")
printIn("ntt%d_16bit(fh_16, fh);" % (n))
printIn("ntt%d_32bit(fh_32, fh);" % (n))
printIn("ntt%d_16bit(gh_16, gh);" % (n))
printIn("ntt%d_32bit(gh_32, gh);" % (n))
print("")
printIn("basemul_16bit_4x4(V, M_16, fh_16); // ux * fh")
printIn("basemul_16bit_4x4(tmp_16_1, M_16+%d, gh_16); // vx * gh" % (v_spacing_16))
printIn("basemul_32bit_4x4(tmp_32_0, M_32, fh_32); // ux * fh")
printIn("basemul_32bit_4x4(tmp_32_1, M_32+%d, gh_32); // vx * gh" % (v_spacing_32))
print("")
printIn("int i, T, *X, *Y, *W;")
printIn("for (X=V, Y=tmp_16_1, i=%d; i>0; i--) {" % (n//2))
printIn("  T = __SADD16(*(Y++),*X);")
printIn("  *(X++) = T;")
printIn("}")
printIn("intt%d_16bit(V);" % (n))
print("")
printIn("for (X=tmp_32_0, Y=tmp_32_1, i=%d; i>0; i--) {" % (n))
printIn("  T = *(Y++) + *X;")
printIn("  *(X++) = T;")
printIn("}")
printIn("intt%d_32bit(tmp_32_0);" % (n))
print("")
printIn("crt%d(V, tmp_32_0);" % (n))
print("")
printIn("basemul_16bit_4x4(V+%d, M_16+%d, fh_16); // r * fh" % (n//2, r_spacing_16))
printIn("basemul_16bit_4x4(tmp_16_1, M_16+%d, gh_16); // s * gh" % (s_spacing_16))
printIn("basemul_32bit_4x4(tmp_32_0, M_32+%d, fh_32); // r * fh" % (r_spacing_32))
printIn("basemul_32bit_4x4(tmp_32_1, M_32+%d, gh_32); // s * gh" % (s_spacing_32))
print("")
printIn("for (X=V+%d, Y=tmp_16_1, i=%d; i>0; i--) {" % (n//2, n//2))
printIn("  T = __SADD16(*(Y++),*X);")
printIn("  *(X++) = T;")
printIn("}")
printIn("intt%d_16bit(V+%d);" % (n, n//2))
print("")
printIn("for (X=tmp_32_0, Y=tmp_32_1, i=%d; i>0; i--) {" % (n))
printIn("  T = *(Y++) + *X;")
printIn("  *(X++) = T;")
printIn("}")
printIn("intt%d_32bit(tmp_32_0);" % (n))
print("")
printIn("crt%d(V+%d, tmp_32_0);" % (n, n//2))

print("")
printIn("for (X=V, Y=M, i=%d; i>0; i--) {  // + f'" % (n//4))
printIn("  T = barrett_16x2i(__SADD16(*(Y++),*X)); *(X++) = T;")
printIn("} ")
printIn("for (X=V+%d, Y=M+%d, i=%d; i>0; i--) {  // + g'" % (n//2, n//4,  n//4))
printIn("  T = barrett_16x2i(__SADD16(*(Y++),*X)); *(X++) = T;")
printIn("}")
print("}")
print("")
print("int jump%ddivsteps(int minusdelta, int *M, int *f, int *g){" % (n))
printIn("int M1[%d], M2[%d], fg[%d];" % (n//2*3, n//2*3, n))
printIn("int M1_16[%d]={0}, M1_32[%d];" % (n*4//2, n*4))
printIn("int M2_16[%d]={0}, M2_32[%d];" % (n*4//2, n*4))
print("")
printIn("minusdelta = jump%ddivsteps(minusdelta, M1, f, g);" % (n//2))
print("")
#   // step: 512/2, 256/2
M_spacing = n//4
M_u = M_spacing*2
M_v = M_spacing*3
M_r = M_spacing*4
M_s = M_spacing*5
printIn("ntt%d_16bit(M1_16, M1+%d); // u1" % (n, M_u))
printIn("ntt%d_16bit(M1_16+%d, M1+%d); // v1" % (n, v_spacing_16, M_v))
printIn("ntt%d_16bit(M1_16+%d, M1+%d); // r1" % (n, r_spacing_16, M_r))
printIn("ntt%d_16bit(M1_16+%d, M1+%d); // s1" % (n, s_spacing_16, M_s))
print("")
#   // step: 512, 256/2
printIn("ntt%d_32bit(M1_32, M1+%d); // u1" % (n, M_u))
printIn("ntt%d_32bit(M1_32+%d, M1+%d); // v1" % (n, v_spacing_32, M_v))
printIn("ntt%d_32bit(M1_32+%d, M1+%d); // r1" % (n, r_spacing_32, M_r))
printIn("ntt%d_32bit(M1_32+%d, M1+%d); // s1" % (n, s_spacing_32, M_s))
print("")
printIn("__gf_polymul_%dx%d_2x2_x2p2(fg, M1_16, M1_32, f+%d, g+%d, M1);" % (n//2, n//2, n//4, n//4))
print("")
printIn("minusdelta = jump%ddivsteps(minusdelta, M2, fg, fg+%d);" % (n//2, n//2))
print("")
printIn("ntt%d_16bit(M2_16, M2+%d); // u2" % (n, M_u))
printIn("ntt%d_16bit(M2_16+%d, M2+%d); // v2" % (n, v_spacing_16, M_v))
printIn("ntt%d_16bit(M2_16+%d, M2+%d); // r2" % (n, r_spacing_16, M_r))
printIn("ntt%d_16bit(M2_16+%d, M2+%d); // s2" % (n, s_spacing_16, M_s))
print("")
printIn("ntt%d_32bit(M2_32, M2+%d); // u2" % (n, M_u))
printIn("ntt%d_32bit(M2_32+%d, M2+%d); // v2" % (n, v_spacing_32, M_v))
printIn("ntt%d_32bit(M2_32+%d, M2+%d); // r2" % (n, r_spacing_32, M_r))
printIn("ntt%d_32bit(M2_32+%d, M2+%d); // s2" % (n, s_spacing_32, M_s))
print("")
printIn("__gf_polymul_%dx%d_2x2_x_2x2(M+%d, M1_16, M1_32, M2_16, M2_32);" % (n//2, n//2, n))
fg_g = n//2
h = n//4
printIn("__gf_polymul_%dx%d_2x2_x2p2(M, M2_16, M2_32, fg+%d, fg+%d, M2);" % (n//2, n//2, h, fg_g+h))
print("")
printIn("return(minusdelta);")
print("}")
