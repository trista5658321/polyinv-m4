from random import randrange

from ntt_python.ntt import ntt
from ntt_python.intt import intt
from ntt_python.crt import crt
from ntt_python.gen_wpad import get_w, cal_w
from ntt_python.basemul import basemul_4x4, basemul_2x2

def reduce_center(p,x):
    x = x % p
    if x > p//2:
        x-=p
    elif x< -p//2:
        x+=p
    return x

def get_c(p,w,n):
    c = get_w(w,n)
    for w_list in c:
        for i in range(len(w_list)):
            w_list[i] = cal_w(p, w_list[i])
    return c

def get_base_w(p,w,n):
    final = get_w(w,n)[-1]
    base_w = []
    for c in final:
        left = c
        right = (w, n//2)
        if c != 1:
            right = (w, c[1]+n//2)

        base_w.append(cal_w(p, left, False))
        base_w.append(cal_w(p, right, False))

    return base_w

def polymul(p, h, f, g):
    for i in range(len(f)//2):
        _f = f[i]
        for j in range(len(g)//2):
            _g = g[j]
            h[i+j] = reduce_center(p, _f * _g + h[i+j])


def ntt_16(n, p, w, f0, g0, layer):
    _f = [0] * n
    _g = [0] * n
    h0 = [0] * n
    fxg = [0] * n
    
    polymul(p, fxg, f0, g0)
    c = get_c(p,w,n)
    basemul_c = get_base_w(p,w,n)
    # print(len(c))
    ntt(n,layer,p,w,c,_f,f0)
    # print(_f)
    ntt(n,layer,p,w,c,_g,g0)
    # print(_g)
    if n//(2**layer) == 4:
        basemul_4x4(p,h0,_f,_g,basemul_c)
    else:
        basemul_2x2(p,h0,_f,_g,basemul_c)
    # print(h0)

    intt(n, layer, p, w, c, h0)

    for i in range(n):
        # if i >= 512-4:
        #     print("_f[%d] = %d" % (i, f0[i]))
        #     print("_g[%d] = %d" % (i, g0[i]))
        if fxg[i] != h0[i]:
            print(i)

    return h0

def ntt_32(n, p, w, f0, g0, layer):
    _f = [0] * n
    _g = [0] * n
    h0 = [0] * n
    fxg = [0] * n

    polymul(p, fxg, f0, g0)
    c = get_c(p,w,n)
    basemul_c = get_base_w(p,w,n)
    # print(len(c))
    ntt(n,layer,p,w,c,_f,f0)
    # print(f0)
    ntt(n,layer,p,w,c,_g,g0)
    # print(_g)
    if n//(2**layer) == 4:
        basemul_4x4(p,h0,_f,_g,basemul_c)
    else:
        basemul_2x2(p,h0,_f,_g,basemul_c)
    # print(h0)

    intt(n, layer, p, w, c, h0)

    for i in range(n):
        # if i >= 512-4:
        #     print("_f[%d] = %d" % (i, f0[i]))
        #     print("_g[%d] = %d" % (i, g0[i]))
        if fxg[i] != h0[i]:
            print(i)

    return h0

    
def mul(n, q, q0, w0, q1, w1, layer):
    f0 = [0] * n
    g0 = [0] * n
    for i in range(n//2):
        # f0[i] = 1
        # g0[i] = 1
        f0[i] = randrange(0,q) - (q//2)
        g0[i] = randrange(0,q) - (q//2)
    # f0 = [3270, 1894, 1178, -3594, -940, 1224, 3384, -950, 1387, -3620, 480, 2644, 3884, -1488, -2854, 1539, 2795, 218, -3269, 9, 2695, -2099, 601, 1031, -437, -3127, -1802, 3342, 83, 2655, -2492, -2866, -3377, -1429, -835, -2430, 1864, 74, -2929, 2575, 632, -759, 2604, -1676, 95, -472, 1738, 3496, -460, -2952, -2151, -2778, 3252, -230, 1488, -2381, -2718, -2128, 1114, -801, 2135, 513, 2526, -774, -1124, 2200, 2129, 1640, -1950, 2768, 3820, -3100, 482, 2335, -566, 2584, -2766, -3910, 1940, -810, 1065, -1876, -3614, -3157, 3628, -3638, -124, -578, 1244, 1331, 976, -3914, 3271, -1301, 1605, -1395, -1708, 2755, -1239, 477, -3915, 528, -1875, -2503, 3343, -2394, 3022, 3305, -1485, -2292, 2893, 3491, -1184, 3589, -3653, -206, 3204, 119, -136, 2190, 1313, -2835, 1999, 3852, 3644, 3761, 940, 3916, 1369, -1755, -1167, -3752, -50, 559, 1284, 1861, -469, -3317, -2303, -2607, 214, 839, 946, -1716, 3842, 3083, -1562, -2043, 3142, -3434, 3366, 384, -1209, 3626, 829, -2146, 3727, -603, 382, 822, -3524, -1811, -3185, -2372, 3634, 1050, -900, 3565, -3222, -2115, 117, -1618, 3698, 3843, 3135, 36, 3754, -1513, -3484, -3454, 867, -1506, 3116, -767, 1872, -315, -650, -628, -446, 3797, -3438, 598, -632, 1925, -1670, 565, -2237, -3938, 1946, 348, 1642, 3417, -2269, -1278, -363, 681, 1367, -699, 1040, 1801, 2162, 2115, -3600, -1229, -1378, -108, 3079, -1635, 829, 3193, -1121, 3750, 3653, 1583, -3092, -2391, 2842, -170, 3083, 2923, -2608, 653, -1326, 2442, -364, -2406, -3792, -841, 1821, 956, 2422, -944, -2301, -1727, 3227, 2862, 1485, 1305, -3777, -3338, 3860, 3201, 710, -3310, -1586, -2220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    # g0 = [-599, -2584, 2701, -214, -1037, 569, -1547, 1247, 1346, 3436, -1698, 864, -38, 202, 1216, -29, 3432, -793, -2667, -1932, -2149, 21, -3440, -1837, 2761, -2146, -97, 680, -1161, 1361, 2568, 215, 3187, 2363, 741, 3787, 1767, 2521, 2716, 1194, 3322, 3544, 3674, -2902, -2620, -3689, 2158, -440, -3666, -3602, -2562, -936, -1835, 872, -3417, 1447, 1297, 965, 157, -782, 109, 1217, -2971, 351, -3890, -3047, 2233, 3251, -2183, -3888, 1514, 767, -2945, -3266, 3404, -3337, -214, 2037, 32, -1262, 2223, 1090, 2527, -3445, 2890, -1576, -3077, 2904, 3267, -1742, -2023, 25, 3347, -3036, -3357, -2813, 75, 3318, -3400, 1979, -1291, 2179, -2843, 3032, -697, -1896, -2357, -3356, -367, -3166, -1387, 1646, 454, -3793, -1287, -3464, 429, -1762, 2448, 2127, 3567, -1520, 1394, -1264, 1228, 3047, 3442, 2736, 3213, 2028, -1802, -708, 3667, 178, 1118, -3737, -515, -2047, 3727, 3851, 14, -1298, 1750, 2111, -31, -693, 1878, 1816, -3484, 3915, 1239, 962, 617, 3195, 350, 3400, -2512, -1230, -1201, -142, 276, 3502, 99, 1655, 2265, 1034, 815, -737, 2411, 957, -1900, -553, -3725, -834, -3108, 1486, -16, 1849, -2879, -610, 3884, -3731, -1182, 353, -2905, 1230, 2337, 3878, 1931, 3304, 320, -2598, -319, 252, -2391, 3109, 1886, 2909, -507, -3075, 1894, -696, 2029, -3421, -378, -2406, -3816, -456, -3243, 1182, 2425, 840, 3244, -1186, 859, -2329, 1972, -1046, 3468, -1513, 642, -1580, 883, -161, 439, -3640, 3182, 226, -287, 2362, -3669, 2798, -379, -552, 3926, 3656, -246, -119, -556, -1099, -1302, 3437, 3733, -3310, -1855, -94, -2047, -560, 2176, 3504, 1728, 2902, 3890, -1455, -690, -671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    # g0[1] = 1
    correct = [0] * n
    ans = [0] * n

    polymul(q, correct, f0, g0)

    h0 = ntt_32(n, q0, w0, f0, g0, layer)
    h1 = ntt_16(n, q1, w1, f0, g0, layer)

    print("=== crt ===")
    flag = 1
    for i in range(n):
        _ans = crt(q, h0[i], q0, h1[i], q1)
        ans[i] = reduce_center(q, _ans)
        if not ( ans[i] == correct[i]):
            flag = 0
            print((i, ans[i]))

    if flag:
        print("y^_^y")
    
    # for test case: g = x
    # for i in range(n-1):
    #     if not ans[i+1] == f0[i]:
    #         print("qq")

# 256
n = 256
q = 7879
q0 = 5168129
w0 = 27827
q1 = 769
w1 = 7
layer = 7

# 512
# n = 512
# q = 7879
# q0 = 1038337
# w0 = 1151
# q1 = 7681
# w1 = 62
# layer = 7

mul(n, q, q0, w0, q1, w1, layer)